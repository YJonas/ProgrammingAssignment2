?read.csv
EGB5offline <- read.csv ("C/data/Euglena data/csv/EGB5offline.csv" header = TRUE)
EGB5offline <- read.csv ("C/data/Euglena data/csv/EGB5offline.csv" header = TRUE)
EGB5offline <- read.csv ("C/data/Euglena data/csv/EGB5offline.csv", header = TRUE)
EGB5offline <- read.csv ("C:/data/Euglena data/csv/EGB5offline.csv", header = TRUE)
EGB5offline
x<-EGB5offline[ , c(1:5,8:15,19:59,62:66,69:71)]
x
x -> EGB5offline
save.image("C:\\data\\Euglena data\\Offline")
EGB5offline <- read.csv ("C:/data/Euglena data/csv/EGB5offline.csv", header = TRUE)
help.search("count")
size(EGB5offline)
help.search("size")
dim (EGB5offline)
EGB5offline <- EGB5offline [ ,c(1:5, 8:15, 19:59, 62, 63, 65:67, 70:72)]
EGB5offline [header]
EGB5offline [names]
colnames (EGB5offline)
levels (EGB5offline)
is
ls()
names (EGB5offline["sample"] <- "ID"
names (EGB5offline)
names (EGB5offline["sample"] <- "ID"
ls()
Is ()
ls ()
names (EGB5offline)
colnames (EGB5offline ["sample"]) <- "ID"
names (EGB5offline)
colnames (EGB5offline)
colnames (EGB5offline)["sample"] <- "ID"
colnames (EGB5offline)[1] <- "ID"
names (EGB5offline)
EGB6offline <- read.csv ("C:\data\Euglena data\csv\EGB6offline.csv", header = TRUE)
EGB6offline <- read.csv ("C:/data/Euglena data/csv/EGB6offline.csv", header = TRUE)
names (EGB6offline)
dim (EGB6offline)
dim (EGB5offline)
EGB7offline <- read.csv ("C:/data/Euglena data/csv/EGB7offline.csv", header = TRUE)
names (EGB7offline)
dim (EGB7offline)
save.image("C:\\data\\Euglena data\\Offline")
save.image("C:\\data\\Euglena data\\Offline.RData")
w1 <- read.csv(file="w1.dat",sep=",",head=TRUE)
names (w1)
tree <- read.csv(file="trees91.csv",sep=",",head=TRUE)
names (tree)
help (stripchart)
stripchart (w1)
stripchart (wi$vals, method = "stack")
stripchart (w1$vals, method = "stack")
stripchart (w1$vals, method = "jitter")
stripchart(w1$vals,method="stack",
main='Leaf BioMass in High CO2 Environment',
xlab='BioMass of Leaves')
hist(w1$vals,main="Distribution of w1",xlab="w1")
hist(w1$vals,breaks=2)
hist(w1$vals,breaks=12,xlim=c(0.9,1.3))
hist(w1$vals,main='Leaf BioMass in High CO2 Environment',xlab='BioMass of Leaves',ylim=c(0,16))
stripchart(w1$vals,add=TRUE,at=15.5)
save.image("C:\\data\\Documents\\cyclismo test.RData")
q()
load("C:\\data\\Euglena data\\Offline.RData")
ls ()
load("C:\\data\\Documents\\cyclismo test.RData")
ls ()
tree$C <- factor(tree$C)
tree$N <- factor(tree$N)
boxplot(tree$STBM,
main='Stem BioMass in Different CO2 Environments',
ylab='BioMass of Stems')
tree
help (factor)
boxplot(tree$STBM~tree$C)
qqnorm(w1$vals)
q()
ls()
x <- rnorm(10,sd=5,mean=20)
y <- 2.5*x - 1.0 + rnorm(10,sd=9,mean=0)
cor(x,y)
plot(x,y,xlab="Independent",ylab="Dependent",main="Random Stuff")
x1 <- runif(8,15,25)
> y1 <- 2.5*x1 - 1.0 + runif(8,-6,6)
> points(x1,y1,col=2)
x1 <- runif(8,15,25)
y1 <- 2.5*x1 - 1.0 + runif(8,-6,6)
points(x1,y1,col=2)
x2 <- runif(8,15,25)
y2 <- 2.5*x2 - 1.0 + runif(8,-6,6)
points(x2,y2,col=3,pch=2)
x2
plot(x,y,xlab="Independent",ylab="Dependent",main="Random Stuff")
points(x1,y1,col=2,pch=3)
points(x2,y2,col=4,pch=5)
legend(14,70,c("Original","one","two"),col=c(1,2,4),pch=c(1,3,5))
xlim=c(0,30),ylim=c(0,100)
xlim=c(0,30)
ylim=c(0,100)
plot(x,y,xlab="Independent",ylab="Dependent",main="Random Stuff",xlim=c(0,30),ylim=c(0,100))
points(x1,y1,col=2,pch=3)
points(x2,y2,col=4,pch=5)
legend(14,70,c("Original","one","two"),col=c(1,2,4),pch=c(1,3,5))
q()
install.packages("swirl")
library ("swirl")
ls()
rm(list=ls())
swirl()
5 + 7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z - 1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
getwd()
ls()
x <- 9
ls()
dir()
?list.files
arg(list.files)
args(list.files)
old.dir <- getwd()
dir.create(testdir)
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
dir()
list.files()
file.exists("mytest.R")
file.info("mytest.R")
args(file.rename)
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
play()
args(file.path)
?file.path
nxt()
file.path("mytest3.R", folder1, folder2)
file.path("mytest3.R", "folder1", "folder2")
file.path("folder1", "folder2")
?dir.create
file.path(file.create("testdir2"), file.create("testdir3"))
dir.create(file.path("testdir2"), file.path("testdir3"))
dir.create(file.path("testdir2"), file.path("testdir3"), recursive = TRUE)
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
help()
unlink("testdir2", recursive = TRUE)
setwd(old.dir)
unlink("testdir", recursive = TRUE)
q()
ls()
rm(ls())
library(swirl)
rm(a = ls())
rm(list=ls())
swirl()
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical (vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, nrow=4, ncol=5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
q()
rm(list(ls()))
rm(list = ls())
library(swirl)
swirl()
Sys.Date()
mean(c(2, 4, 5))
source('C:/Users/YWYANM~1/AppData/Local/Temp/RtmpYLOzdv/boring_function.R')
boring_function <- function(x) {
x
}
submit()
boring_function <- function(x) {
x
} submit()
boring_function <- function(x) {
x
}
submit()
source('C:/Users/YWYANM~1/AppData/Local/Temp/RtmpYLOzdv/boring_function.R')
submit()
boring_function('My first function')
boring_function('My first function!')
boring_function
submit()
my_mean(c(4, 5, 10))
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div= 2)
args(remainder)
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x + 1}, 6)
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("I love Fred")
submit()
mad_libs(c("place"= "Helsinki", "noun"="winter", "adjective"= "cold"))
submit()
"I" %p% "love" %p% "R"
"I" %p% "love" %p% "R!"
q()
install packages(KernSmooth)
install_packages(KernSmooth)
install.packages("KernSmooth")
library(KernSmooth)
q8
q()
setwd("~.R")
setwd("C:/data/Documents/R")
library(datasets)
data(iris)
?iris
head(iris)
sapply(iris, colmeans)
sapply(iris, colMeans)
dim(iris)
sapply(iris, colMeans)
lapply(iris, colMeans)
sapply(lris[ ,1:4], colMeans)
sapply(iris[ ,1:4], colMeans)
colMeans(iris)
sapply(iris[ ,1:4], mean)
sapply(iris, mean)
tapply(iris, iris["Species"]), mean)
tapply(iris, iris["Species"], mean)
factor(iris["Species"])
?gl
?factor
class(iris["Species"])
class(iris$Species)
apply(iris$Sepal.Length, iris$Species, mean)
apply(iris, iris$Species, mean)
levels(iris$Species)
apply(iris["Sepal.Length"], iris$Species, mean)
str(apply)
tapply(iris["Sepal.Length"], iris$Species, mean)
str(tapply)
length(iris["Sepal.Length"])
length(iris$Sepal.Length)
tapply(iris$Sepal.Length, iris$Species, mean)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(split(mtcars$hp, mtcars$cyl), mean)
a <- sapply(split(mtcars$hp, mtcars$cyl), mean)
a[3]-a[1]
setwd("C:/GIT/ProgrammingAssignment2")
source('C:/GIT/ProgrammingAssignment2/cachematrix.R')
getwd()
a <- matrix(1:9, 3, 3)
a
makeCacheMatrix(a)
cacheSolve(x)
cacheSolve(a)
source('C:/GIT/ProgrammingAssignment2/cachematrix.R')
cacheSolve(a)
source('C:/GIT/ProgrammingAssignment2/cachematrix.R')
cacheSolve(a)
m <- matrix(c(-1, -2, 1, 1), 2,2)
m
makeCacheMatrix(m)
cacheSolve(m)
b <- makeCachematrix(m)
b <- makeCacheMatrix(m)
b$get()
solve(m)
source('C:/GIT/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix(m)
cacheSolve(m)
b <- makeCacheMatrix()
b$set_inv()
b$set_inv(m)
cacheSolve(m)
inv
source('C:/GIT/ProgrammingAssignment2/cachematrix.R')
b <- makeCacheMatrix(m)
cacheSolve(b)
cacheSole(b)
cacheSolve(b)
source('C:/GIT/ProgrammingAssignment2/cachematrix.R')
b <- makeCacheMatrix(a)
cacheSolve(b)
source('C:/GIT/ProgrammingAssignment2/cachematrix.R')
cacheSolve(b)
source('C:/GIT/ProgrammingAssignment2/cachematrix.R')
b$set(a)
cacheSolve(m)
source('C:/GIT/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix(m)
b <- makeCacheMatrix(m)
b$set(a)
cacheSolve(b)
b <- makeCacheMatrix(m)
cacheSolve(b)
source('C:/GIT/ProgrammingAssignment2/cachematrix.R')
source('C:/GIT/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix(m)
mat
source('C:/GIT/ProgrammingAssignment2/cachematrix.R')
source('C:/GIT/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix(m)
source('C:/GIT/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix(m)
cacheSolve(makeCacheMatrix(m))
b <- makeCacheMatrix(m)
cacheSolve(b)
source('C:/GIT/ProgrammingAssignment2/cachematrix.R')
b <- makeCacheMatrix(m)
cacheSolve(b)
cacheSolve(b)
c <- cacheSolve(b)
makeCacheMatrix(c)
d <- makeCacheMatrix(c)
cacheSolve(d)
cacheSolve(d)
source('C:/GIT/ProgrammingAssignment2/cachematrix.R')
source('C:/GIT/ProgrammingAssignment2/cachematrix.R')
source('C:/GIT/ProgrammingAssignment2/cachematrix.R')
b <- makeCacheMatrix(m)
b
cacheSolve(b)
source('C:/GIT/ProgrammingAssignment2/cachematrix.R')
source('C:/GIT/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix(m)
b <- makeCacheMatrix(m)
cacheSolve(b)
source('C:/GIT/ProgrammingAssignment2/cachematrix.R')
b <- makeCacheMatrix(m)
cacheSolve(b)
cacheSolve(b)
n <- solve(m)
b <- makeCacheMatrix(m)
cacheSolve(b)
cacheSolve(b)
c <- makeCacheMatrix(n)
cacheSolve(c)
q()
